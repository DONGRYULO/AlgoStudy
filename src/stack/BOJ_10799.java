package stack;

/*

    구현시간 : 2시간
    풀이방법 참고 : O
    이해 여부 : O
    난이도 : 중상      

    **************************************************************************
    괄호를 통해서 쇠막대기와 레이저의 배치를 표현

    레이저 표현)
    () -> 무조건 여는괄호 다음에 닫는 괄호가 나오면 레이저, 즉 인접한 쌍이면 레이저

    쇠막대기 표현)
    인접한 쌍이 아닌 여는 괄호와 닫는 괄호면 쇠막대기

    Q.인접한 쌍과 인접하지 않은 쌍을 구분하는 방법은?
    arr = ["(","(",")",")"]

    ")"가 나왔을 때, 이전 인덱스에 있는 괄호가 "(" 인지 체크해서 "("가 맞다면 레이저 표현
    -> 가장 최근에 push된 값을 pop 이후 size 만큼 막대 개수 추가

    막대의 끝인 경우 막대 개수 1개 추가

    ex)
    () (((()()) (( )) () )) (())

    case0. ()
    () -> pop이후에 스택에 괄호가 0개 존재하므로 잘려진 막대기는 0개

    case1. (())

    (( -> 닫는 괄호 2개 push
    닫는 괄호 추가시 stack이 비어있으므로 (괄호가 없음) 맨아래의 새로운 막대기 시작

    ( () -> 닫는 괄호인데 레이저이므로 pop 이후 스택에 있는 size만큼 막대 개수 추가
    ( -> 1개 추가

    ( () ) -> 닫는 괄호인데 레이저가 아니므로 다음 괄호 체크하기 (막대의 끝인 경우)
    -> 막대기의 끝이므로 1개 추가

    case2. ((( () () ) ( () ) () ))

    (((( -> 괄호 4개 push
    ((( () -> 닫는 괄호인데 레이저이므로 pop 이후 스택에 있는 size만큼 막대 개수 추가
    => ((( 3개 추가

    ((( () () -> 닫는 괄호인데 레이저이므로 pop 이후 스택에 있는 size만큼 막대 개수 추가
    => ((( 3개 추가

    ((( () () ) -> 닫는 괄호인데 레이저가 아니므로 다음 괄호 체크하기 (막대의 끝인 경우)
    =>  1개 추가

    ((( () () ) ( ( -> stack에 2개 push

    ((( () () ) ( ()  -> 닫는 괄호인데 레이저이므로 pop 이후 스택에 있는 size만큼 막대 개수 추가
    => (( 2개 추가

    ((( () () ) ( () ) -> 닫는 괄호인데 레이저가 아니므로 다음 괄호 체크하기
    =>  1개 추가

    ((( () () ) ( () ) () -> 닫는 괄호인데 레이저이므로 pop 이후 스택에 있는 size만큼 막대 개수 추가
    =>  2개 추가

    ((( () () ) ( () ) () ) -> 닫는 괄호인데 레이저가 아니므로 다음 괄호 체크하기
    =>  1개 추가

    ((( () () ) ( () ) () ) ) -> 닫는 괄호인데 레이저가 아니므로 다음 괄호 체크하기
    =>  1개 추가

*/

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Scanner;

public class BOJ_10799 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String[] input = sc.nextLine().split("");

        Deque<String> stack = new ArrayDeque<>();
        int cnt = 0;
        for(int i=0;i<input.length;i++){
            if(input[i].equals("(")){
                stack.push(input[i]);
            }else if(input[i].equals(")")){
                if(input[i - 1].equals("(")){ // 레이저인 경우
                    stack.pop();
                    cnt += stack.size();
                }else { // 막대기의 끝인 경우
                    stack.pop();
                    cnt++;
                }
            }
        }

        System.out.println(cnt);
    }
}






















